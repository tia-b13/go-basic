/*Third Maximum Number
Given an integer array nums, return the third distinct maximum number in this array. If the third maximum does not exist, return the maximum number.

Example 1:
Input: nums = [3,2,1]
Output: 1
Explanation:
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.

Example 2:
Input: nums = [1,2]
Output: 2
Explanation:
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.
*/


package main
import "fmt"
func summaryRanges(num []int) int {
	uniquamap := make(map[int]bool)
	var result []int
	//unic element code
	for _, nu := range num {
		if !uniquamap[nu] {
			uniquamap[nu] = true
			result = append(result, nu)
		}
	}
	// sorting code
	n := len(result)
	for i := 0; i < n-1; i++ {
		min := i
		for j := i + 1; j < n; j++ {
			if result[j] > result[min] {
				min = j
			}
		}
		if result[i] != result[min] {
			result[i], result[min] = result[min], result[i]
		}
	}

	// third maxinum number
	if len(result) >= 3 {
		return result[2]
	}
	return result[0]
}
func main() {
	nums := []int{2, 2, 3, 1}
	fmt.Println(summaryRanges(nums))

}
