/*Longest Substring Without Repeating Characters
Given a string s, find the length of the longest substring without duplicate characters.
Example 1:
Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.

Example 3:
Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
*/
package main
import "fmt"
func lengthOfLongestSubstring(s string) int {
	charterstring := make(map[rune]int)
	start := 0
	logeststring := 0
	for ends, char := range []rune(s) {
		idx, exits := charterstring[char]
		if exits && idx >= start {
			start = idx + 1
		}
		charterstring[char] = ends
		currentmap := ends - start + 1
		if currentmap > logeststring {
			logeststring = currentmap
		}
	}
	return logeststring
}
func main() {
	fmt.Println("length Of Longest Sub string is :", lengthOfLongestSubstring("qwerereyirasdffghjklzxcvyu"))
}



